// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.0
// source: server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeywordExtractor_ExtractKeywords_FullMethodName = "/keywords.KeywordExtractor/ExtractKeywords"
)

// KeywordExtractorClient is the client API for KeywordExtractor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeywordExtractorClient interface {
	ExtractKeywords(ctx context.Context, in *KeywordRequest, opts ...grpc.CallOption) (*KeywordResponse, error)
}

type keywordExtractorClient struct {
	cc grpc.ClientConnInterface
}

func NewKeywordExtractorClient(cc grpc.ClientConnInterface) KeywordExtractorClient {
	return &keywordExtractorClient{cc}
}

func (c *keywordExtractorClient) ExtractKeywords(ctx context.Context, in *KeywordRequest, opts ...grpc.CallOption) (*KeywordResponse, error) {
	out := new(KeywordResponse)
	err := c.cc.Invoke(ctx, KeywordExtractor_ExtractKeywords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeywordExtractorServer is the server API for KeywordExtractor service.
// All implementations must embed UnimplementedKeywordExtractorServer
// for forward compatibility
type KeywordExtractorServer interface {
	ExtractKeywords(context.Context, *KeywordRequest) (*KeywordResponse, error)
	mustEmbedUnimplementedKeywordExtractorServer()
}

// UnimplementedKeywordExtractorServer must be embedded to have forward compatible implementations.
type UnimplementedKeywordExtractorServer struct {
}

func (UnimplementedKeywordExtractorServer) ExtractKeywords(context.Context, *KeywordRequest) (*KeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractKeywords not implemented")
}
func (UnimplementedKeywordExtractorServer) mustEmbedUnimplementedKeywordExtractorServer() {}

// UnsafeKeywordExtractorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeywordExtractorServer will
// result in compilation errors.
type UnsafeKeywordExtractorServer interface {
	mustEmbedUnimplementedKeywordExtractorServer()
}

func RegisterKeywordExtractorServer(s grpc.ServiceRegistrar, srv KeywordExtractorServer) {
	s.RegisterService(&KeywordExtractor_ServiceDesc, srv)
}

func _KeywordExtractor_ExtractKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordExtractorServer).ExtractKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeywordExtractor_ExtractKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordExtractorServer).ExtractKeywords(ctx, req.(*KeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeywordExtractor_ServiceDesc is the grpc.ServiceDesc for KeywordExtractor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeywordExtractor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keywords.KeywordExtractor",
	HandlerType: (*KeywordExtractorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractKeywords",
			Handler:    _KeywordExtractor_ExtractKeywords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
